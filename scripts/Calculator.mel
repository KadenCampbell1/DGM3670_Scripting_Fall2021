global proc float Add(float $numbers[])
{
    float $sum = $numbers[0];
    for($i=1; $i<size($numbers); $i++)
    {
        $sum += $numbers[$i];
    }
    return $sum;
}

global proc float Difference(float $numbers[])
{
    float $difference = $numbers[0];
    for($i=1; $i<size($numbers); $i++)
    {
        $difference -= $numbers[$i];
    }
    return $difference;
}

global proc float Multiplication(float $numbers[])
{
    float $multiplication = $numbers[0];
    for($i=1; $i<size($numbers); $i++)
    {
        $multiplication *= $numbers[$i];
    }
    return $multiplication;
}

global proc float Division(float $numbers[])
{
    float $division = $numbers[0];
    for($i=1; $i<size($numbers); $i++)
    {
        $division /= $numbers[$i];
    }
    return $division;
}

global proc float Power(float $constant, float $exponent)
{
    float $result = $constant;
    for($i=1; $i<$exponent; $i++)
    {
        $result *= $constant; 
    }
    return $result;
}

global proc float Mean(float $numbers[])
{
    float $result = Add($numbers)/2;
    return $result;
}

global proc float Median(float $numbers[])
{
    float $result = 0;
    $numbers = sort($numbers);
    if(size($numbers)%2 == 1)
    {
        $result = $numbers[size($numbers)/2];
    }
    else
    {
        int $value = size($numbers)/2;
        print($value);
        $result = Division({Add({$numbers[$value],$numbers[$value-1]}),2});
    }
    return $result;
}

global proc float[] Mode(float $numbers[])
{
    float $mode = 0;
    float $count = 1;
    float $contestant = 0;
    int $i = 0;
    while($i<size($numbers))
    {
        $contestant = 0;
        for($index=0; $index<size($numbers); $index++)
        {
            if($numbers[$i] == $numbers[$index])
            {
                $contestant++;
            }
        }
        if($contestant > $count)
        {
            $mode = $numbers[$i];
            $count = $contestant;
        }
        $i++;
    }
    if($count <= 1)
    {
        $mode = 0;
    }
    return {$mode};
}

Mode({5,4,4,3,3,2,1});

